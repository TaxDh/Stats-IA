setwd("C:/Users/kf891141/Desktop/Stats-IA/Seance")
# On prépare notre directory ainsi que nos fonctions R.
#setwd()
source('Fonctions.R')
#GenGroup: Genere des points de plusieurs groupes
#n: nombre d'observations
#prob: probabilité de groupe
#centres: centre des groupes, de taille c X d (nombre de centre par dimension)
GenGroup <- function(n,prob,centres){
#Dimension des données
d <- ncol(centres)
#nombres de groupes
c <- nrow(centres)
data <- matrix(data=rep(0,n*d),nrow=n)
#number of each class
nc <- rmultinom(1, n, prob)
start=0
assign <- rep(0,n)
for (j in 1:c){
assign[(start+1):(start+nc[j])] <-j
start=start+nc[j]
}
start=0
#En i on fait le tour de nos groupes et en j le tours de nos dimensions
for (i in 1:c){
for (j in 1:d){
data[(start+1):(start+nc[i]),j] <- rnorm(nc[i],mean=centres[i,j])
}
start=start+nc[i]
}
return(list(data,assign))
}
View(GenGroup)
# Allons modifier Utility.R ensemble pour y ajouter un générateur de données
n = 1000
prob = c(0.3,0.3,0.4)
centres = matrix(data=c(0,3,3,-3,5,5),nrow=3,byrow=TRUE)
centres
out <- GenGroup(n,prob,centres)
data <- out[[1]]
assign <- out[[2]]
plot(data, col=assign)
# Disons:
#kmeans: procède au partitionnement en k groupes
# data: ensemble de données
# k: nombre de groupe
# ite: nombre d'itération
kmean <- function(data,k,iter) {
#n: nb d'obersvation
n <- nrow(data)
#assignement aléatoire
assignements <- sample(1:k, n, replace=TRUE)#assignement au hasard
for (j in 1:iter){#il y avait une erreur dans le code original, c'était k au lieu de iter.
centres <- Calcul_Centre(data,k,assignements)
assignements <- Calcul_Assign(data,k,centres)
}
return(list(centres,assignements))
}
#44 min
Calcul_Assign <- function(data,k,centres){
assignements <- rep(0,nrow(data))
distance <- matrix(rep(0,nrow(data)*k),nrow=nrow(data))
for (i in 1:nrow(data)){
for (j in 1:k){
distance[i,j] <- sqrt(sum((data[i,]-centres[j,])^2))
}
assignements[i] <- which.min(distance[i,])
}
return(assignements)
}
i in 1
Returns <- kmean(data,3,10^3)
#37 min environ
Calcul_Centre <- function(data,k,assignements){
d <- ncol(data)
centres <- matrix(data=rep(0,d*k),nrow=k)
for (j in 1:k){
centres[j,] <- colSums(data[assignements==j,])/sum(assignements==j)#on aurait pu faire colMeans(data[assignements==j,])
}
return(centres)
}
#44 min
Calcul_Assign <- function(data,k,centres){
assignements <- rep(0,nrow(data))
distance <- matrix(rep(0,nrow(data)*k),nrow=nrow(data))
for (i in 1:nrow(data)){
for (j in 1:k){
distance[i,j] <- sqrt(sum((data[i,]-centres[j,])^2))
}
assignements[i] <- which.min(distance[i,])
}
return(assignements)
}
Returns <- kmean(data,3,10)
Returns
plot(data,col=Returns[[2]])
returns <- kmeans(data,3)
plot(data,col=Returns[[2]])
plot(data,col=returns$cluster)
Returns <- kmean(data,3,10^3)
plot(data,col=Returns[[2]])
plot(data,col=returns$cluster)
returns <- kmeans(data,3)
plot(data,col=Returns[[2]])
GenGroup <- function(n,prob,centres){
#Dimension des données
d <- ncol(centres)
#nombres de groupes
c <- nrow(centres)
data <- matrix(data=rep(0,n*d),nrow=n)
#number of each class
nc <- rmultinom(1, n, prob)
start=0
assign <- rep(0,n)
for (j in 1:c){
assign[(start+1):(start+nc[j])] <-j
start=start+nc[j]
}
start=0
#En i on fait le tour de nos groupes et en j le tours de nos dimensions
for (i in 1:c){
for (j in 1:d){
data[(start+1):(start+nc[i]),j] <- rnorm(nc[i],mean=centres[i,j])
}
start=start+nc[i]
}
return(list(data,assign))
}
#La fonction devrait aller dans fonction.R (ce qui est le cas), bonne pratique de programmation
# Allons modifier Utility.R ensemble pour y ajouter un générateur de données
n = 1000
prob = c(0.3,0.3,0.4)
centres = matrix(data=c(0,3,3,-3,5,5),nrow=3,byrow=TRUE)
centres
out <- GenGroup(n,prob,centres)
data <- out[[1]]
assign <- out[[2]]
plot(data, col=assign)
# Essayons de programmer ensemble k-means clustering
# On commence par quelque chose de très haut niveau/général
# sans entrer dans les détails calculatoires.
# Disons:
#kmeans: procède au partitionnement en k groupes
# data: ensemble de données
# k: nombre de groupe
# ite: nombre d'itération
kmean <- function(data,k,iter) {
#n: nb d'obersvation
n <- nrow(data)
#assignement aléatoire
assignements <- sample(1:k, n, replace=TRUE)#assignement au hasard
for (j in 1:iter){#il y avait une erreur dans le code original, c'était k au lieu de iter.
centres <- Calcul_Centre(data,k,assignements)
assignements <- Calcul_Assign(data,k,centres)
}
return(list(centres,assignements))
}
#37 min environ
Calcul_Centre <- function(data,k,assignements){
d <- ncol(data)
centres <- matrix(data=rep(0,d*k),nrow=k)
for (j in 1:k){
centres[j,] <- colSums(data[assignements==j,])/sum(assignements==j)#on aurait pu faire colMeans(data[assignements==j,])
}
return(centres)
}
#44 min
Calcul_Assign <- function(data,k,centres){
assignements <- rep(0,nrow(data))
distance <- matrix(rep(0,nrow(data)*k),nrow=nrow(data))
for (i in 1:nrow(data)){
for (j in 1:k){
distance[i,j] <- sqrt(sum((data[i,]-centres[j,])^2))
}
assignements[i] <- which.min(distance[i,])
}
return(assignements)
}
Calcul_Assign2 <- function(data,k,centres){#autre calcul, tentative d'amélioration de calcul_assign, peut etre que ça ne fonctionne pas selon cédrik
assignements <- rep(1,nrow(data))
for (i in 1:nrow(data)){
distance <- sqrt(sum((data[i,]-centres[1,])^2))
for (j in 2:k){
if (sqrt(sum((data[i,]-centres[j,])^2))<distance){
distance <- sqrt(sum((data[i,]-centres[j,])^2))
assignements[i] <- j
}
}
}
return(assignements)
}
#Une bonne procédure en analyse de données serait de mettre ces fonctions
#personalisé et algo dans un autre document; disons Kmeans.R
Returns <- kmean(data,3,10^3)
# On peut comparer avec la fonction r
?kmeans
returns <- kmeans(data,3)
plot(data,col=Returns[[2]])
plot(data,col=returns$cluster)
# Problème plus compliqué
n = 2000
prob = c(0.3,0.3,0.4)
centres = matrix(data=c(3,0,3,-3,4,4),nrow=3,byrow=TRUE)
centres
out <- GenGroup(n,prob,centres)
data <- out[[1]]
assign <- out[[2]]
plot(data, col=assign)
Returns <- kmean(data,3,10^3)
kmeans(data,3)
plot(data,col=Returns[[2]])
plot(data,col=returns$cluster)
# Problème plus compliqué
n = 2000
prob = c(0.3,0.3,0.4)
centres = matrix(data=c(3,0,3,-3,4,4),nrow=3,byrow=TRUE)
centres
out <- GenGroup(n,prob,centres)
data <- out[[1]]
assign <- out[[2]]
plot(data, col=assign)
plot(data, col=assign)
Returns <- kmean(data,3,10^3)
returns <- kmeans(data,3)
plot(data,col=Returns[[2]])
plot(data,col=returns$cluster)
# Problème plus compliqué
n = 2000
prob = c(0.2,0.2,0.2,0.2,0.2)
centres = matrix(data=c(3,0,3,-3,4,4,2,2,1,4),nrow=5,byrow=TRUE)
centres
out <- GenGroup(n,prob,centres)
data <- out[[1]]
assign <- out[[2]]
plot(data, col=assign)
Returns <- kmean(data,3,10^3)
returns <-kmeans(data,3)
