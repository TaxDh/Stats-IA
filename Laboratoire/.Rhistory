set(wd)
setwd("~/")
get(~/)
get("~/"")
x
setwd("~/Documents/R - Cours/Stats-IA/Laboratoire")
library((ISLR))
require((ISLR))
require(ISLR)
install.packages("ISLR")
knitr::opts_chunk$set(error = TRUE)
library(ISLR2)
set.seed(1)
train <- sample(392, 196)
train
sex <- lm(mpg ~ horsepower, data = Auto, subset = train)
sex
lm.fit <- lm(mpg ~ horsepower, data = Auto, subset = train)
lm.fit
?lm
Auto
attach(Auto)
mean((mpg - predict(lm.fit, Auto))[-train]^2)
mpg
colnames(Auto)
?islr2$Auto
?ISLR2$Auto
?ISLR2
?ISLR2
ISLR2
ISLR
?ISLR
lm.fit2 <- lm(mpg ~ poly(horsepower, 2), data = Auto,
subset = train)
mean((mpg - predict(lm.fit2, Auto))[-train]^2)
lm.fit3 <- lm(mpg ~ poly(horsepower, 3), data = Auto,
subset = train)
mean((mpg - predict(lm.fit3, Auto))[-train]^2)
set.seed(2)
train <- sample(392, 196)
lm.fit <- lm(mpg ~ horsepower, subset = train)
mean((mpg - predict(lm.fit, Auto))[-train]^2)
lm.fit2 <- lm(mpg ~ poly(horsepower, 2), data = Auto,
subset = train)
mean((mpg - predict(lm.fit2, Auto))[-train]^2)
lm.fit3 <- lm(mpg ~ poly(horsepower, 3), data = Auto,
subset = train)
mean((mpg - predict(lm.fit3, Auto))[-train]^2)
glm.fit <- glm(mpg ~ horsepower, data = Auto)
coef(glm.fit)
lm.fit
lm.fit <- lm(mpg ~ horsepower, data = Auto)
coef(lm.fit)
setwd("~/Trimestre Actuel/STT3030 - Apprentissage Statistique/Stats-IA/Laboratoire")
knitr::opts_chunk$set(error = TRUE)
sample(392, 196)
train
-train
-sample(392, 196)
train <- sample(392, 196)
-train
train
library(ISLR)
install.packages("ISLR")
library(ISLR)
library(boot)
?cv.glm
plot(mpg ~ horsepower, data = Auto)
glm.fit <- glm(mpg ~ horsepower, data = Auto)
glm.fit
cv.glm(Auto, glm.fit)$delta
getOption("encoding")
#on créé une formule pour utiliser la formule 5.2 du livre
loocv <- function(fit) {
h~lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
#On l'essaie
loocv(glm.fit)
#on créé une formule pour utiliser la formule 5.2 du livre
loocv <- function(fit) {
h<-lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
#On l'essaie
loocv(glm.fit)
cv.error <- rep(0,5)
cv.error
degree <- 1:5
for(d in degree){
glm.fit <- glm(mpg ~ poly(horsepower,d), data = Auto)
cv.error[d] <- loocv(glm.fit)
}
plot(degree, cv.error, type = "b")
cv.error10 <- rep(0,5)
glm.fit <- glm(mpg ~ poly(horsepower,d), data = Auto)
for(d in degree){
glm.fit <- glm(mpg ~ poly(horsepower,d), data = Auto)
cv.error10[d] <- cv.glm(Auto, glm.fit, K=10)$delta[1]
}
plot(degree, cv.error10, type = "b")
plot(degree, cv.error, type = "b")
plot(degree, cv.error10, type = "r")
plot(degree, cv.error, type = "b")
plot(degree, cv.error10, type = "b", col = "red")
plot(degree, cv.error, type = "b")
lines(degree, cv.error10, type = "b", col = "red")
